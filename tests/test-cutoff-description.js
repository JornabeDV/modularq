const https = require('https');
const http = require('http');

// Configuraci√≥n
const LOCAL_URL = 'http://localhost:3000';

// Funci√≥n para hacer requests
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https');
    const client = isHttps ? https : http;
    
    const urlObj = new URL(url);
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    if (options.body) {
      requestOptions.headers['Content-Length'] = Buffer.byteLength(options.body);
    }

    const req = client.request(requestOptions, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({
            statusCode: res.statusCode,
            data: jsonData,
            rawData: data
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            data: null,
            rawData: data
          });
        }
      });
    });

    req.on('error', reject);
    
    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

// Funci√≥n para colorear output
function log(message, color = 'white') {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    bold: '\x1b[1m',
    reset: '\x1b[0m'
  };
  
  console.log(`${colors[color] || colors.white}${message}${colors.reset}`);
}

// Funci√≥n para mostrar ejemplos de descripciones
function showCutoffDescriptionExamples() {
  log('\nüìù Ejemplos de Descripciones de Corte Autom√°tico:', 'blue');
  
  const examples = [
    {
      task: 'Crear bot√≥n de login',
      estimated: 1,
      worked: 1.5,
      description: 'Corte autom√°tico: Tarea excedi√≥ l√≠mite de tiempo (1.20h). Trabajado: 1.50h. Sistema complet√≥ autom√°ticamente.'
    },
    {
      task: 'Desarrollar m√≥dulo completo',
      estimated: 8,
      worked: 10,
      description: 'Corte autom√°tico: Tarea excedi√≥ l√≠mite de tiempo (9.60h). Trabajado: 10.00h. Sistema complet√≥ autom√°ticamente.'
    },
    {
      task: 'Tarea sin estimaci√≥n',
      estimated: null,
      worked: 2.5,
      description: 'Corte autom√°tico: Tarea excedi√≥ l√≠mite de tiempo (2.00h). Trabajado: 2.50h. Sistema complet√≥ autom√°ticamente.'
    }
  ];
  
  examples.forEach((example, index) => {
    log(`\n${index + 1}. ${example.task}`, 'white');
    log(`   Estimado: ${example.estimated || 'N/A'} horas`, 'white');
    log(`   Trabajado: ${example.worked} horas`, 'white');
    log(`   Descripci√≥n:`, 'cyan');
    log(`   "${example.description}"`, 'yellow');
  });
}

// Funci√≥n para mostrar qu√© se actualiza en la base de datos
function showDatabaseUpdates() {
  log('\nüóÑÔ∏è Actualizaciones en Base de Datos:', 'blue');
  
  log('\nüìã Tabla: time_entries', 'cyan');
  log('   ‚úÖ end_time = timestamp actual', 'green');
  log('   ‚úÖ hours = horas de la sesi√≥n', 'green');
  log('   ‚úÖ description = "Corte autom√°tico: Tarea excedi√≥ l√≠mite..."', 'green');
  log('   ‚úÖ updated_at = timestamp actual', 'green');
  
  log('\nüìã Tabla: project_tasks', 'cyan');
  log('   ‚úÖ status = "completed"', 'green');
  log('   ‚úÖ end_date = timestamp actual', 'green');
  log('   ‚úÖ actual_hours = horas totales trabajadas', 'green');
  log('   ‚úÖ progress_percentage = 100', 'green');
  log('   ‚úÖ updated_at = timestamp actual', 'green');
}

// Funci√≥n para mostrar c√≥mo verificar en la base de datos
function showDatabaseVerification() {
  log('\nüîç C√≥mo Verificar en Base de Datos:', 'blue');
  
  log('\nüìä Query para verificar time_entries:', 'cyan');
  log('   SELECT id, task_id, start_time, end_time, hours, description', 'white');
  log('   FROM time_entries', 'white');
  log('   WHERE task_id = \'tu-task-id\' AND end_time IS NOT NULL;', 'white');
  
  log('\nüìä Query para verificar project_tasks:', 'cyan');
  log('   SELECT id, task_id, status, end_date, actual_hours, progress_percentage', 'white');
  log('   FROM project_tasks', 'white');
  log('   WHERE task_id = \'tu-task-id\' AND status = \'completed\';', 'white');
  
  log('\nüìä Query para verificar corte autom√°tico:', 'cyan');
  log('   SELECT te.description, pt.status, pt.actual_hours', 'white');
  log('   FROM time_entries te', 'white');
  log('   JOIN project_tasks pt ON te.task_id = pt.task_id', 'white');
  log('   WHERE te.description LIKE \'%Corte autom√°tico%\'', 'white');
  log('   AND pt.status = \'completed\';', 'white');
}

// Funci√≥n para mostrar el flujo completo
function showCompleteFlow() {
  log('\nüîÑ Flujo Completo del Corte Autom√°tico:', 'blue');
  
  log('\n1Ô∏è‚É£ Detecci√≥n:', 'cyan');
  log('   - Cron job ejecuta cada 5 minutos', 'white');
  log('   - Verifica sesiones activas', 'white');
  log('   - Calcula tiempo trabajado', 'white');
  log('   - Compara con l√≠mite (estimado + 20%)', 'white');
  
  log('\n2Ô∏è‚É£ Corte Autom√°tico:', 'cyan');
  log('   - Si excede l√≠mite: CORTE AUTOM√ÅTICO', 'white');
  log('   - Actualiza project_tasks como completada', 'white');
  log('   - Finaliza time_entries con descripci√≥n', 'white');
  log('   - Registra raz√≥n del corte', 'white');
  
  log('\n3Ô∏è‚É£ Resultado:', 'cyan');
  log('   - Tarea marcada como completada', 'white');
  log('   - Sesi√≥n terminada con descripci√≥n', 'white');
  log('   - Operario no puede continuar', 'white');
  log('   - Trazabilidad completa del corte', 'white');
}

// Funci√≥n para mostrar ventajas de la descripci√≥n
function showDescriptionBenefits() {
  log('\n‚úÖ Ventajas de la Descripci√≥n:', 'blue');
  
  log('\nüîç Trazabilidad:', 'cyan');
  log('   - Saber exactamente por qu√© se cort√≥', 'white');
  log('   - Ver l√≠mite vs tiempo trabajado', 'white');
  log('   - Identificar si fue autom√°tico o manual', 'white');
  
  log('\nüìä Auditor√≠a:', 'cyan');
  log('   - Historial completo de cortes', 'white');
  log('   - An√°lisis de patrones de tiempo', 'white');
  log('   - Identificar tareas problem√°ticas', 'white');
  
  log('\nüéØ Mejora Continua:', 'cyan');
  log('   - Ajustar estimaciones si es necesario', 'white');
  log('   - Identificar tareas que siempre exceden', 'white');
  log('   - Optimizar procesos de trabajo', 'white');
}

// Funci√≥n principal
async function runDescriptionDemo() {
  log('üìù ModularQ - Descripci√≥n del Corte Autom√°tico', 'bold');
  log('==============================================', 'bold');
  
  // 1. Mostrar ejemplos de descripciones
  showCutoffDescriptionExamples();
  
  // 2. Mostrar actualizaciones en BD
  showDatabaseUpdates();
  
  // 3. Mostrar c√≥mo verificar
  showDatabaseVerification();
  
  // 4. Mostrar flujo completo
  showCompleteFlow();
  
  // 5. Mostrar ventajas
  showDescriptionBenefits();
  
  // Resumen
  log('\nüìä Resumen:', 'bold');
  log('==========', 'bold');
  
  log('‚úÖ Descripci√≥n agregada al campo "description" de time_entries', 'green');
  log('‚úÖ Formato: "Corte autom√°tico: Tarea excedi√≥ l√≠mite de tiempo (X.XXh). Trabajado: Y.YYh. Sistema complet√≥ autom√°ticamente."', 'green');
  log('‚úÖ Trazabilidad completa del corte autom√°tico', 'green');
  log('‚úÖ Auditor√≠a y an√°lisis de patrones de tiempo', 'green');
  
  log('\nüéØ Pr√≥ximos Pasos:', 'blue');
  log('   1. Probar con tarea real que exceda l√≠mite', 'white');
  log('   2. Verificar descripci√≥n en time_entries', 'white');
  log('   3. Confirmar que project_tasks se complet√≥', 'white');
  log('   4. Analizar patrones de corte autom√°tico', 'white');
}

// Ejecutar
if (require.main === module) {
  runDescriptionDemo().catch(error => {
    log(`‚ùå Error: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { runDescriptionDemo, showCutoffDescriptionExamples };
